---
author: Jed Roundy
format: pdf
---

#3.1 Setup

##3.1.1 Packages
```{r}
library(nycflights13)
library(tidyverse)
```

##3.1.3 dplyr basics
```{r}
#Pipe takes thing on left and operates on it
flights |>  
  filter(dest == 'IAH') |> 
  group_by(year, month, day) |> 
  summarise(
    arr_delay = mean(arr_delay, na.rm = TRUE)
  )

#dplyr functions work on 4 groups -> rows, cols, groups, tables
```

#3.2 Rows

Main functions that operate on rows: 
filter(), arrange(), distinct()

## 3.2.1 filter()
```{r}
#Allows you to keep something based on if a value is true in that row

#This gets all flights more than 120min/2hrs late
flights |> filter(dep_delay >  120)

#use the & operator to select flights on the first day of the year
flights |> 
  filter(month == 1 & day == 1)

#flights that departed in Jan or Feb
flights |> 
  filter(month == 2 | month == 2)

#when using == and |, can also do month %in% c(1,2)
flights |> 
  filter(month %in% c(1,2))

```

##3.2.3 arrange()
```{r}
#Arange changes the order of the column values

#We want the flights to go from the very first one to the very last one. 
flights |> 
  arrange(year, month, day, dep_time)

#We can use the desc() function on specific columns
flights |> 
  arrange(desc(dep_time))

```

##3.2.4 distinct()

```{r}
#finds all unique rows in a dataset without any other args
flights |> 
  distinct()


#But maybe we only want to show the combinations of origin and destination places
flights |> 
  distinct(origin, dest)

#In case we want all the columns, we use .keep_all = TRUE
#Keeps the first row found to be unique
flights |> 
  distinct(carrier, .keep_all = TRUE)


```

##3.2 Exercises
```{r}
#1. Find flights that meet all conditions:
flights |> 
  filter(sched_arr_time >= 120)  #arrival delay of two or more hours

flights |> 
  filter(dest %in% c('IAH', 'HOU')) #flew to houston (IAH or HOU)
  
flights |>
  filter(carrier %in% c('UA', 'AA', 'DL')) #were operated by United, American, or Delta
  
flights |> 
  filter(month %in% c(7,8,9))#Departed in summer(July, Aug, September)
  
flights |> 
  filter(dep_delay <= 0 & arr_delay > 120) #Arrived more than two hours late, but didn't leave late
  
flights |> 
  filter(dep_delay >= 60 & arr_delay < 30) #were delayed by at least an hour, but made up over 30 min in flight
  
#2. Sort flights to find the flights with longest departure days. Find the flights that left earliest in the morning
flights |> 
  arrange(desc(hour), desc(minute))

flights |> 
  arrange(dep_time)

#3. Sort flights to find the fastest flight
flights |> 
  arrange(desc((distance / air_time)))

#4. Was there a flight on every day of 2013? Yes

flights |> 
  distinct(month, day) |> 
  count()

#5. Which flights traveled the furthest distance? Which traveled the least distance? 

flights |> 
  arrange(distance)

flights |> 
  arrange(desc(distance))

#6. Does order of filter() and arrange() matter?
#It may be more efficient to filter first, than arrange, but they should yield the same results. 
```

#3.3 Columns

Four important functions for columns: mutate(), select(), rename(), relocate()

##3.3.1 mutate()
```{r}
#purpose of mutate is to add new columns based on existing columns
flights |> 
  mutate(
    gain = dep_delay - arr_delay, 
    speed = distance / air_time * 60
  )

#.before argument puts the new columns at the left of the data
flights |> 
  mutate(
    gain = dep_delay - arr_delay, 
    speed = distance / air_time * 60, 
    .before = 1
  )

#we can also do .after and name some variable
flights |> 
  mutate(
    gain = dep_delay - arr_delay, 
    speed = distance / air_time * 60,
    .after = day
  )
#This is equivalent to 
flights |> 
  mutate(
    gain = dep_delay - arr_delay, 
    speed = distance / air_time * 60, 
    .before = dep_time
  )

#We can also use the 'used' keyword in the .keep argument, specifying we only keep columns used in calculations
flights |> 
  mutate(
    gain = dep_delay - arr_delay, 
    hours = air_time / 60, 
    gain_per_hour = gain / hours, 
    .keep = 'used'
  )
```

##3.3.2 select()

```{r}
#select by name
flights |> 
  select(year, month, day)

#select all columns between year and day inclusive
flights |> 
  select(year:day)

#select all cols except those between yer and day, inclusive
flights |> 
  select(!year:day)

#select all cols that are characters
flights |> 
  select(where(is.character))

#Plenty of additional functions to use with select, including but not limited to:
#starts_with('abc')
flights |> 
  select(starts_with('arr'))
#ends_with('xyz')
flights |> 
  select(ends_with('time'))
#contains('ijk')
flights |> 
  select(contains('ar'))
#num_range('x', 1:3) selects x1, x2, x3

#they can also be renamed in the select function
#new name appears on the left

flights |> 
  select(tail_num = tailnum)
```

##3.3.3 rename()
```{r}
#Same as just above, but keeps all variables
flights |> 
  rename(tail_num = tailnum)

#when lots of poorly named columns, use 
#janitor::clean_names()

```

##3.3.4 relocate()
```{r}
#Relocate moves them to the front by default
flights |> 
  relocate(time_hour, air_time)

#or move them so somewhere specific
flights |> 
  relocate(year:day, .after = sched_arr_time)

flights |> 
  relocate(starts_with('arr'), .before = dep_time)
```

##3.3 Exercises
```{r}
#1. Compare dep_time, sched_dep_time, and dep_delay. How are the numbers related? 
#dep_delay is dep_time - sched_dep_time
flights |> 
  mutate(dep_delay = (dep_time - sched_dep_time)) |> 
  relocate(dep_delay, .after = dep_delay)

#2. how many ways can I select dep_time, dep_delay, arr_time, and arr_delay? 
deparr <- c('dep_time', 'dep_delay', 'arr_time', 'arr_delay')

flights |> 
  select(deparr)

flights |> 
  select(starts_with('dep') | starts_with('arr'))

flights |> 
  select(contains('_'))

#3. What happens if you specify the name of the same var multiple times in a select call?
flights |> 
  select(arr_time, arr_time)
#It just selects that column. No errors thrown

#4. What does the any_of() func do? Why might it be helpful in conjunction with this vector? 
variables <- c('year', 'month', 'day', 'dep_delay', 'arr_delay')
flights |> select(any_of(variables))
#selects any variables in the list that exist in the data specified

#5.This one gets all variables with 'time', "TIME", or 'TiMe'
flights |> 
  select(contains('TIME'))

#This one gets none
flights |> 
  select(contains('TIME', ignore.case = FALSE))

#6. Rename air_time toair_time_min to indicate units of measurement and move it to the beginning of dataframe
flights |> 
  relocate(air_time_min = air_time)

#7.  Why doesn't the following work? 

flights |> 
  select(tailnum) |> 
  arrange(arr_delay)

#because it removes arr_delay before they try to arrange by it
```

#3.5 Groups

Most important group functions: group_by(), summarize(), slice functions

##3.5.1 group_by()
```{r}
#This doesn't alter the dataframe significantly, but does create the 'group' object. 
#Now, subsequent operations will work 'by month'. 
flights |> 
  group_by(month)

```
##3.5.2 summarize()
```{r}
#summarize is used heavily with group_by. 
#when used with group_by, reduces each group to one row
flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay)
  )
#this produces missing vals because one of the values in each group has a missing value
flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE)
  )

#one useful summarize function is n() - gives numer of rows in each group

flights |> 
  group_by(month) |> 
  summarize(
    avg_delay = mean(dep_delay, na.rm = TRUE), 
    n = n()
  ) |> 
  arrange(n)

```

##3.5.3 slice_ functions
```{r}
#Five main slice functions:
#slice_head, slice_tail, slice_min, slice_max, slice_sample

flights |> 
  group_by(month) |> 
  slice_head(n = 5) #n is how many of the first rows to take

flights |> 
  group_by(month) |> 
  slice_tail(n = 2)

#these flights are the flights that gained the most time in the air, by month
flights |> 
  group_by(month) |> 
  slice_min(arr_delay, prop = .01) #here, we can select the column whose minimum we are interested in for each group. 
#we can also use the proportion of the group instead of a specific number of rows

#These flights left very very early compared to initial departure time
flights |> 
  group_by(month) |> 
  slice_max(dep_delay, n = 1)

#gets a random sample of each group. No column input
flights |> 
  group_by(month) |> 
  slice_sample(n = 1)

```

##3.5.4 Grouping by multiple variables
```{r}
#We can group by more than one!

flights |> 
  group_by(year, month, day) |> 
  summarize(
    n = n()
  )
#Note: be careful when summarizing because if you summarize, it will drop the last group formed.
#Override using .groups = 'keep'

flights |> 
  group_by(year, month, day) |> 
  summarize(
    n = n(), 
    .groups = 'keep'
  )


```

##3.5.5 ungroup()

```{r}
#If we want to ungroup our rows, we can use ungroup()
grouped <- flights |> 
  group_by(year, month)

#this gets 12 rows
grouped |> summarize(
  n = n()
)

#this gets high n (however many observations in total dataset)
grouped |> 
  ungroup() |> 
  summarize(
    n = n()
  )

```
##3.5.6 .by
```{r}
#this allows you to group by for an operation
flights |> 
  summarize(delay = mean(dep_delay, na.rm = TRUE), 
            n = n(), 
            .by = month)

flights |> 
  summarize(delay = mean(dep_delay, na.rm = TRUE), 
            n = n(), 
            .by = c(origin, dest))


```
##3.5 Exercises
```{r}
#1. Which carrier has the worst delays? 
flights |> 
  group_by(carrier) |> 
  summarize(
    avg_dep_delay = mean(dep_delay, na.rm = TRUE), 
  ) |> 
  arrange(desc(avg_dep_delay))
  
#Frontier airlines

#2. Find the flights that are the most delayed upon departure from each destination
flights |> 
  group_by(dest) |> 
  summarize(
    avg_dep_delay = mean(dep_delay, na.rm = TRUE)
  ) |> 
  arrange(avg_dep_delay)

#3. How do dealys vary over the course of the day? 
flights |> 
  group_by(hour) |> 
  summarize(
    avg_dep_delay = mean(dep_delay, na.rm = TRUE)
    ) |> 
  ggplot(aes(x = hour, y = avg_dep_delay)) + 
  geom_line()

ggsave('Output/avg_dep_delay_by_carrier.png')

#4. What happens if you suply a negative n to slice_ functions?

flights |> 
  group_by(carrier) |> 
  slice_min(dep_delay, n = -5)
#this gets all except the max 5 rows

#5. Explain what count() does in terms of the dplyr verbs. What does the sort argument to count() do? 

#Count says how many observations there are in each group
#
flights |> 
  group_by(month) |> 
  count()
```
